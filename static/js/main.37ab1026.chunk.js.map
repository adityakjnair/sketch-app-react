{"version":3,"sources":["canvas.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isPainting","userStrokeStyle","guestStrokeStyle","line","userId","v4","prevPos","offsetX","offsetY","onMouseDown","bind","assertThisInitialized","onMouseMove","endPaintEvent","Pusher","logToConsole","pusher","cluster","forceTLS","nativeEvent","_ref","_ref2","offSetData","positionData","start","objectSpread","stop","concat","paint","sendPaintData","currPos","strokeStyle","x","y","ctx","beginPath","moveTo","lineTo","stroke","body","fetch","method","JSON","stringify","headers","content-type","req","json","_this2","canvas","width","height","getContext","lineJoin","lineCap","lineWidth","subscribe","data","console","log","forEach","position","_this3","react_default","a","createElement","ref","style","background","onMouseLeave","onMouseUp","Component","App","react","textAlign","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37ab1026.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { v4 } from 'uuid';\r\nimport Pusher from 'pusher-js';\r\n\r\nclass Canvas extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onMouseDown = this.onMouseDown.bind(this);\r\n        this.onMouseMove = this.onMouseMove.bind(this);\r\n        this.endPaintEvent = this.endPaintEvent.bind(this);\r\n        Pusher.logToConsole = true;\r\n        this.pusher = new Pusher('8bfa62afc4715b6ebbf3', {\r\n            cluster: 'us3',\r\n            forceTLS: true\r\n        });\r\n    }\r\n\r\n    isPainting = false;\r\n    // Different stroke styles to be used for user and guest\r\n    userStrokeStyle = '#EE92C2';\r\n    guestStrokeStyle = '#F0C987';\r\n    line = [];\r\n    // v4 creates a unique id for each user. We used this since there's no auth to tell users apart\r\n    userId = v4();\r\n    prevPos = { offsetX: 0, offsetY: 0 };\r\n\r\n    onMouseDown({ nativeEvent }) {\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        this.isPainting = true;\r\n        this.prevPos = { offsetX, offsetY };\r\n    }\r\n\r\n    onMouseMove({ nativeEvent }) {\r\n        if (this.isPainting) {\r\n            const { offsetX, offsetY } = nativeEvent;\r\n            const offSetData = { offsetX, offsetY };\r\n            // Set the start and stop position of the paint event.\r\n            const positionData = {\r\n                start: { ...this.prevPos },\r\n                stop: { ...offSetData },\r\n            };\r\n            // Add the position to the line array\r\n            this.line = this.line.concat(positionData);\r\n            this.paint(this.prevPos, offSetData, this.userStrokeStyle);\r\n        }\r\n    }\r\n    endPaintEvent() {\r\n        if (this.isPainting) {\r\n            this.isPainting = false;\r\n            this.sendPaintData();\r\n        }\r\n    }\r\n    paint(prevPos, currPos, strokeStyle) {\r\n        debugger;\r\n        const { offsetX, offsetY } = currPos;\r\n        const { offsetX: x, offsetY: y } = prevPos;\r\n\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = strokeStyle;\r\n        // Move the the prevPosition of the mouse\r\n        this.ctx.moveTo(x, y);\r\n        // Draw a line to the current position of the mouse\r\n        this.ctx.lineTo(offsetX, offsetY);\r\n        // Visualize the line using the strokeStyle\r\n        this.ctx.stroke();\r\n        this.prevPos = { offsetX, offsetY };\r\n    }\r\n\r\n    async sendPaintData() {\r\n        const body = {\r\n            line: this.line,\r\n            userId: this.userId\r\n        };\r\n        // We use the native fetch API to make requests to the server\r\n        const req = await fetch('http://localhost:4000/paint', {\r\n            method: 'post',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n        const res = await req.json();\r\n        this.line = [];\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Here we set up the properties of the canvas element. \r\n        this.canvas.width = 1000;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.ctx.lineJoin = 'round';\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineWidth = 5;\r\n        const channel = this.pusher.subscribe('painting');\r\n        channel.bind('draw', (data) => {\r\n            const { userId, line } = data;\r\n            console.log('User ' + userId + ' drew.')\r\n            if (userId !== this.userId) {\r\n                line.forEach((position) => {\r\n                    this.paint(position.start, position.stop, this.guestStrokeStyle);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas\r\n                // We use the ref attribute to get direct access to the canvas element. \r\n                ref={(ref) => (this.canvas = ref)}\r\n                style={{ background: 'black' }}\r\n                onMouseDown={this.onMouseDown}\r\n                onMouseLeave={this.endPaintEvent}\r\n                onMouseUp={this.endPaintEvent}\r\n                onMouseMove={this.onMouseMove}\r\n            />\r\n        );\r\n    }\r\n}\r\nexport default Canvas;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Canvas from './canvas';\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h3 style={{ textAlign: 'center' }}>Dos Paint</h3>\n        <div className=\"main\">\n          <div className=\"color-guide\">\n            <h5>Color Guide</h5>\n            <div className=\"user user\">User</div>\n            <div className=\"user guest\">Guest</div>\n          </div>\n          <Canvas />\n        </div>\n      </Fragment>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}